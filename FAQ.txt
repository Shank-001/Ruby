$$ ------Methods------

Q1. Method without Parentheses()?
Ans: In Ruby, when you define or call (execute, use) a method, 
you can omit the parentheses.
So these lines mean exactly the same:

puts add_two 2
puts add_two(2)   *Use this convention.
puts(add_two 2)
puts(add_two(2))

* Use parentheses for all method calls that take arguments, 
  except for the methods puts and p (and later: require and include).
* If a method does not take any arguments, then do not add empty 
  parentheses, omit them.

Q2. Boolean 'and' vs Logical '&&' (Used in If condition)?
Ans: Both works the same, but '&&' has higher precedence than 'and'.
Same follows of 'or' and '||'.
Precedence Order:  '&&,||'  >  '='  >  'and/or'

Q3. Defining class method and Calling class method inside and outside of Class?
Ans: Syntax:

      class ClassName
        def self.class_method
                # or  
        def ClassName.class_method
          puts "I am a class method"
        end

        # Calling method inside of Class.
        class_method
        self.class_method
        ClassName.class_method
        # All 3 of above are valid.
      end

      # Calling method.
      ClassName.class_method
      # self.class_method      #Invalid syntax (Error).
      # class_method           #Invalid syntax (Error).

Q4. Defining instance method and Calling instance method?
Ans: Syntax:

      class ClassName
        def instance_method
          puts "I am an instance method"
        end
        

      end

      # Calling method.
      obj = ClassName.new
      obj.instance_method
            # or
      ClassName.new.instance_method => "I am an instance method"

Q5. Method outside class?
Ans: Syntax:

      class SampleClass
        # Some Code
      end

      def outside_method
        puts 'Hello from method outside class.'
      end

      print "Calling method which is outside of class: "
      outside_method
      # obj.outside_method            --Invalid Syntax (Error)--
      # TestMethods.outside_method    --Invalid Syntax (Error)--

Q6. Can we call class method, instance method and outside method 
    inside a Class?
Ans: Class Method: Yes, class method can be called inside the Class.
Like this,

      class_method
            # or
      ClassName.class_method    
            # or
      self.class_method 

All 3 of above are valid syntax.

Instance Method: Yes, instance method can be called inside the Class
using object of the same class. Like this,

      ClassName.new.inst_method
            # or
      i_obj = ClassName.new
      i_obj.inst_method   
      # obj.inst_method      --Invalid Syntax (Error: Cannot 
                              use object outside the Class)--

Outside Method: No, outside methods cannot be used in a Class at all.

Q7. Calling vs Printing a method using puts?
Ans: Syntax: 

      def sample_method
        puts "I am Sample Mehtod."
        x = 251
        y = 351
      end

      # Simply Calling a method.
      puts "Simply calling a method: "
      # This won't print the x and y value or last statement value.
      sample_method
      puts
      # OUTPUT:- I am Sample Mehtod.

      # Printing a method, It prints the last statement along with any 
      # puts statements.
      puts "Now printing the method using puts: "
      puts sample_method
      # OUTPUT:- I am Sample Mehtod.
                 351
      puts 
      puts "Printing a method, prints its last statement: #{sample_method}"
      # OUTPUT:- I am Sample Mehtod.
                 Printing a method, prints its last statement: 351

$$ ------Blocks------

Q1. 

$$ ------Modules------
 
Q1. Module vs Class?
Ans: ╔═══════════════╦═══════════════════════════╦═════════════════════════════════╗
     ║               ║ class                     ║ module                          ║
     ╠═══════════════╬═══════════════════════════╬═════════════════════════════════╣
     ║ instantiation ║ can be instantiated       ║ can *not* be instantiated       ║
     ╟───────────────╫───────────────────────────╫─────────────────────────────────╢
     ║ usage         ║ object creation           ║ mixin facility. provide         ║
     ║               ║                           ║   a namespace.                  ║
     ╟───────────────╫───────────────────────────╫─────────────────────────────────╢
     ║ superclass    ║ module                    ║ object                          ║
     ╟───────────────╫───────────────────────────╫─────────────────────────────────╢
     ║ methods       ║ class methods and         ║ module methods and              ║
     ║               ║   instance methods        ║   instance methods              ║
     ╟───────────────╫───────────────────────────╫─────────────────────────────────╢
     ║ inheritance   ║ inherits behaviour and can║ No inheritance                  ║
     ║               ║   be base for inheritance ║                                 ║
     ╟───────────────╫───────────────────────────╫─────────────────────────────────╢
     ║ inclusion     ║ cannot be included        ║ can be included in classes and  ║
     ║               ║                           ║   modules by using the include  ║
     ║               ║                           ║   command (includes all         ║
     ║               ║                           ║   instance methods as instance  ║
     ║               ║                           ║   methods in a class/module)    ║
     ╟───────────────╫───────────────────────────╫─────────────────────────────────╢
     ║ extension     ║ can not extend with       ║ module can extend instance by   ║
     ║               ║   extend command          ║   using extend command (extends ║
     ║               ║   (only with inheritance) ║   given instance with singleton ║
     ║               ║                           ║   methods from module)          ║
     ╚═══════════════╩═══════════════════════════╩═════════════════════════════════╝

Q2. require vs include keyword?
Ans: The require statement is similar to the include statement of C and C++ and the import statement of Java.

Q3. require vs require_relative?
Ans: The general rule of thumb is 'require' should be used for external files, like gems,
 while require_relative should be used for referring to files within your directory. 
 Though you can call on absolute paths using both methods, but require_relative's scope 
 is wider and is aware of the entire directory where the program resides. 

Q4. Class include Module, Module include Module, Class include Class, Module include Class?
Ans: Only Module are included, Class is never included. (Only statement 1 & 2 are True.)
Class can include Module and Module can also include another Module.

$$ ------Strings------

Q1. String Interpolation #{ }?
Ans: You can have actual code inside the interpolation #{ }. Ruby calls the 'to_s' method 
on the string interpolation block, his tells the object to convert itself into a string.

Q2. 